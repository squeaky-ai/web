export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  BigInt: any;
  Event: any;
  ISO8601Date: any;
  ISO8601DateTime: any;
};

export type ActiveVisitorCount = {
  __typename?: 'ActiveVisitorCount';
  count: Scalars['Int'];
  siteId: Scalars['ID'];
};

export type Admin = {
  __typename?: 'Admin';
  activeMonthlyUsers: Scalars['Int'];
  activeVisitors: Array<ActiveVisitorCount>;
  blogImages: Array<Scalars['String']>;
  recordingsCount: Scalars['Int'];
  recordingsProcessed: Scalars['Int'];
  recordingsStored: Array<AdminRecordingsStored>;
  roles: AdminRoles;
  site?: Maybe<AdminSite>;
  sites: AdminSites;
  sitesBundles: Array<SitesBundle>;
  sitesCount: Scalars['Int'];
  sitesStored: Array<AdminSitesStored>;
  user?: Maybe<AdminUser>;
  users: AdminUsers;
  usersCount: Scalars['Int'];
  usersPartners: Array<AdminUser>;
  usersStored: Array<AdminUsersStored>;
  verified: AdminVerified;
  visitorsCount: Scalars['Int'];
};


export type AdminSiteArgs = {
  siteId: Scalars['ID'];
};


export type AdminSitesArgs = {
  page?: InputMaybe<Scalars['Int']>;
  search?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<AdminSiteSort>;
};


export type AdminUserArgs = {
  userId: Scalars['ID'];
};


export type AdminUsersArgs = {
  page?: InputMaybe<Scalars['Int']>;
  search?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<AdminUserSort>;
};

/** Autogenerated input type of AdminBlogDeleteImage */
export type AdminBlogDeleteImageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  key: Scalars['String'];
};

/** Autogenerated input type of AdminBlogPostCreate */
export type AdminBlogPostCreateInput = {
  author: Scalars['String'];
  body: Scalars['String'];
  category: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  draft: Scalars['Boolean'];
  metaDescription: Scalars['String'];
  metaImage: Scalars['String'];
  scripts: Array<Scalars['String']>;
  slug: Scalars['String'];
  tags: Array<Scalars['String']>;
  title: Scalars['String'];
};

/** Autogenerated input type of AdminBlogPostDelete */
export type AdminBlogPostDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of AdminBlogPostUpdate */
export type AdminBlogPostUpdateInput = {
  author?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['String']>;
  category?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  draft?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  metaDescription?: InputMaybe<Scalars['String']>;
  metaImage?: InputMaybe<Scalars['String']>;
  scripts?: InputMaybe<Array<Scalars['String']>>;
  slug?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  title?: InputMaybe<Scalars['String']>;
};

export type AdminBlogSignImage = {
  __typename?: 'AdminBlogSignImage';
  fields: Scalars['String'];
  url: Scalars['String'];
};

/** Autogenerated input type of AdminBlogSignImage */
export type AdminBlogSignImageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  filename: Scalars['String'];
};

/** Autogenerated input type of AdminPartnerInvoiceUpdate */
export type AdminPartnerInvoiceUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  status: Scalars['Int'];
};

export type AdminRecordingsStored = {
  __typename?: 'AdminRecordingsStored';
  count: Scalars['Int'];
  date: Scalars['ISO8601Date'];
};

/** Autogenerated input type of AdminReferralDelete */
export type AdminReferralDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

export type AdminRoles = {
  __typename?: 'AdminRoles';
  admins: Scalars['Int'];
  members: Scalars['Int'];
  owners: Scalars['Int'];
  readonly: Scalars['Int'];
};

export type AdminSite = {
  __typename?: 'AdminSite';
  activeUserCount: Scalars['Int'];
  analytics: Analytics;
  anonymiseFormInputs: Scalars['Boolean'];
  anonymiseText: Scalars['Boolean'];
  billing?: Maybe<SiteBilling>;
  browsers: Array<Scalars['String']>;
  bundled: Scalars['Boolean'];
  bundledWith: Array<AdminSite>;
  consent: Consent;
  countries: Array<RecordingsCountry>;
  createdAt: Scalars['ISO8601DateTime'];
  cssSelectorBlacklist: Array<Scalars['String']>;
  daysSinceLastRecording: Scalars['Int'];
  domainBlacklist: Array<SitesDomainBlacklist>;
  error: ErrorsError;
  errors: Errors;
  errorsCounts: ErrorsCounts;
  eventCapture: EventsCapture;
  eventCounts: EventsCounts;
  eventFeed: EventsFeed;
  eventGroups: Array<EventsGroup>;
  eventStats: Array<EventsStat>;
  feedback: Feedback;
  heatmaps: Heatmaps;
  id: Scalars['ID'];
  ingestEnabled: Scalars['Boolean'];
  ipBlacklist: Array<SitesIpBlacklist>;
  languages: Array<Scalars['String']>;
  magicErasureEnabled: Scalars['Boolean'];
  name: Scalars['String'];
  notes: Notes;
  nps: Nps;
  ownerName: Scalars['String'];
  pageUrls: Array<Scalars['String']>;
  pages: Array<SitesPage>;
  plan?: Maybe<SitesPlan>;
  provider?: Maybe<Scalars['String']>;
  providerUuid?: Maybe<Scalars['String']>;
  recording?: Maybe<Recording>;
  recordingCounts: AdminSiteRecordingsCounts;
  recordingLatest?: Maybe<Recording>;
  recordings: Recordings;
  recordingsCount: Scalars['Int'];
  recordingsHighlights: RecordingsHighlights;
  referrers: Array<Scalars['String']>;
  routes: Array<Scalars['String']>;
  sentiment: Sentiment;
  siteType: Scalars['Int'];
  superuserAccessEnabled: Scalars['Boolean'];
  tags: Array<Tag>;
  team: Array<Team>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  url: Scalars['String'];
  utmCampaigns: Array<Scalars['String']>;
  utmContents: Array<Scalars['String']>;
  utmMediums: Array<Scalars['String']>;
  utmSources: Array<Scalars['String']>;
  utmTerms: Array<Scalars['String']>;
  uuid: Scalars['String'];
  verifiedAt?: Maybe<Scalars['ISO8601DateTime']>;
  visitor?: Maybe<Visitor>;
  visitors: Visitors;
  visitorsHighlights: VisitorsHighlights;
};


export type AdminSiteAnalyticsArgs = {
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};


export type AdminSiteErrorArgs = {
  errorId: Scalars['ID'];
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};


export type AdminSiteErrorsArgs = {
  fromDate: Scalars['ISO8601Date'];
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<ErrorsSort>;
  toDate: Scalars['ISO8601Date'];
};


export type AdminSiteErrorsCountsArgs = {
  errorId?: InputMaybe<Scalars['ID']>;
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};


export type AdminSiteEventCaptureArgs = {
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<EventsCaptureSort>;
};


export type AdminSiteEventCountsArgs = {
  captureIds?: Array<Scalars['ID']>;
  fromDate: Scalars['ISO8601Date'];
  groupIds?: Array<Scalars['ID']>;
  toDate: Scalars['ISO8601Date'];
};


export type AdminSiteEventFeedArgs = {
  captureIds: Array<Scalars['ID']>;
  fromDate: Scalars['ISO8601Date'];
  groupIds: Array<Scalars['ID']>;
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<EventsFeedSort>;
  toDate: Scalars['ISO8601Date'];
};


export type AdminSiteEventStatsArgs = {
  captureIds?: Array<Scalars['ID']>;
  fromDate: Scalars['ISO8601Date'];
  groupIds?: Array<Scalars['ID']>;
  toDate: Scalars['ISO8601Date'];
};


export type AdminSiteHeatmapsArgs = {
  device?: HeatmapsDevice;
  excludeRecordingIds?: InputMaybe<Array<Scalars['ID']>>;
  fromDate: Scalars['ISO8601Date'];
  page: Scalars['String'];
  toDate: Scalars['ISO8601Date'];
  type: HeatmapsType;
};


export type AdminSiteNotesArgs = {
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
};


export type AdminSiteNpsArgs = {
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};


export type AdminSitePagesArgs = {
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};


export type AdminSiteRecordingArgs = {
  recordingId: Scalars['ID'];
};


export type AdminSiteRecordingsArgs = {
  filters?: InputMaybe<RecordingsFilters>;
  fromDate: Scalars['ISO8601Date'];
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<RecordingsSort>;
  toDate: Scalars['ISO8601Date'];
};


export type AdminSiteRecordingsHighlightsArgs = {
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};


export type AdminSiteSentimentArgs = {
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};


export type AdminSiteVisitorArgs = {
  visitorId: Scalars['ID'];
};


export type AdminSiteVisitorsArgs = {
  filters?: InputMaybe<VisitorsFilters>;
  fromDate: Scalars['ISO8601Date'];
  page?: InputMaybe<Scalars['Int']>;
  search?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<VisitorsSort>;
  toDate: Scalars['ISO8601Date'];
};


export type AdminSiteVisitorsHighlightsArgs = {
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};

/** Autogenerated input type of AdminSiteAssociateCustomer */
export type AdminSiteAssociateCustomerInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  customerId: Scalars['String'];
  siteId: Scalars['ID'];
};

/** Autogenerated input type of AdminSiteDelete */
export type AdminSiteDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of AdminSiteIngestUpdate */
export type AdminSiteIngestUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  enabled: Scalars['Boolean'];
  siteId: Scalars['ID'];
};

export type AdminSitePagination = {
  __typename?: 'AdminSitePagination';
  pageSize: Scalars['Int'];
  sort: AdminSiteSort;
  total: Scalars['Int'];
};

/** Autogenerated input type of AdminSitePlanUpdate */
export type AdminSitePlanUpdateInput = {
  auditTrailEnabled?: InputMaybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  dataStorageMonths?: InputMaybe<Scalars['Int']>;
  featuresEnabled?: InputMaybe<Array<PlanFeature>>;
  maxMonthlyRecordings?: InputMaybe<Scalars['Int']>;
  notes?: InputMaybe<Scalars['String']>;
  privateInstanceEnabled?: InputMaybe<Scalars['Boolean']>;
  responseTimeHours?: InputMaybe<Scalars['Int']>;
  siteId: Scalars['ID'];
  ssoEnabled?: InputMaybe<Scalars['Boolean']>;
  support?: InputMaybe<Array<Scalars['String']>>;
  teamMemberLimit?: InputMaybe<Scalars['Int']>;
};

export type AdminSiteRecordingsCounts = {
  __typename?: 'AdminSiteRecordingsCounts';
  deletedAll: Scalars['Int'];
  deletedCurrentMonth: Scalars['Int'];
  totalAll: Scalars['Int'];
  totalCurrentMonth: Scalars['Int'];
};

export enum AdminSiteSort {
  CreatedAtAsc = 'created_at__asc',
  CreatedAtDesc = 'created_at__desc',
  NameAsc = 'name__asc',
  NameDesc = 'name__desc'
}

export type AdminSites = {
  __typename?: 'AdminSites';
  items: Array<AdminSite>;
  pagination: AdminSitePagination;
};

export type AdminSitesStored = {
  __typename?: 'AdminSitesStored';
  allCount: Scalars['Int'];
  date: Scalars['ISO8601Date'];
  unverifiedCount: Scalars['Int'];
  verifiedCount: Scalars['Int'];
};

export type AdminUser = {
  __typename?: 'AdminUser';
  communication?: Maybe<UsersCommunication>;
  createdAt: Scalars['ISO8601DateTime'];
  email: Scalars['String'];
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lastActivityAt?: Maybe<Scalars['ISO8601DateTime']>;
  lastName?: Maybe<Scalars['String']>;
  partner?: Maybe<UsersPartner>;
  provider?: Maybe<Scalars['String']>;
  sites: Array<Site>;
  superuser: Scalars['Boolean'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  visitor?: Maybe<Visitor>;
};

/** Autogenerated input type of AdminUserDelete */
export type AdminUserDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

export type AdminUserPagination = {
  __typename?: 'AdminUserPagination';
  pageSize: Scalars['Int'];
  sort: AdminUserSort;
  total: Scalars['Int'];
};

/** Autogenerated input type of AdminUserPartnerCreate */
export type AdminUserPartnerCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  slug: Scalars['String'];
};

export enum AdminUserSort {
  CreatedAtAsc = 'created_at__asc',
  CreatedAtDesc = 'created_at__desc',
  LastActivityAtAsc = 'last_activity_at__asc',
  LastActivityAtDesc = 'last_activity_at__desc',
  NameAsc = 'name__asc',
  NameDesc = 'name__desc'
}

export type AdminUsers = {
  __typename?: 'AdminUsers';
  items: Array<AdminUser>;
  pagination: AdminUserPagination;
};

export type AdminUsersStored = {
  __typename?: 'AdminUsersStored';
  count: Scalars['Int'];
  date: Scalars['ISO8601Date'];
};

export type AdminVerified = {
  __typename?: 'AdminVerified';
  unverified: Scalars['Float'];
  verified: Scalars['Float'];
};

export type Analytics = {
  __typename?: 'Analytics';
  bounceCounts: AnalyticsBounceCounts;
  bounceRate: AnalyticsBounceRate;
  bounces: Array<AnalyticsBounce>;
  browsers: AnalyticsBrowsers;
  countries: Array<AnalyticsCountry>;
  devices: Array<AnalyticsDevice>;
  dimensions: Array<AnalyticsDimension>;
  exits: Array<AnalyticsExit>;
  languages: Array<AnalyticsLanguage>;
  pageViewCount: AnalyticsPageViewCount;
  pageViews: AnalyticsPageViews;
  pages: AnalyticsPages;
  pagesPerSession: AnalyticsPagesPerSession;
  perPage: AnalyticsPerPage;
  recordings: AnalyticsRecordings;
  recordingsCount: AnalyticsRecordingsCount;
  referrers: AnalyticsReferrers;
  sessionDurations: AnalyticsSessionDurations;
  sessionsPerVisitor: AnalyticsSessionsPerVisitor;
  userPaths: Array<AnalyticsUserPath>;
  visitors: AnalyticsVisitors;
  visitorsCount: AnalyticsVisitorsCount;
  visitsAt: Array<AnalyticsVisitAt>;
};


export type AnalyticsBouncesArgs = {
  size?: InputMaybe<Scalars['Int']>;
};


export type AnalyticsBrowsersArgs = {
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<AnalyticsBrowsersSort>;
};


export type AnalyticsExitsArgs = {
  size?: InputMaybe<Scalars['Int']>;
};


export type AnalyticsPagesArgs = {
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<AnalyticsPagesSort>;
};


export type AnalyticsPerPageArgs = {
  page: Scalars['String'];
};


export type AnalyticsReferrersArgs = {
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
};


export type AnalyticsUserPathsArgs = {
  page: Scalars['String'];
  position: PathPosition;
};

export type AnalyticsBounce = {
  __typename?: 'AnalyticsBounce';
  percentage: Scalars['Float'];
  url: Scalars['String'];
};

export type AnalyticsBounceCount = {
  __typename?: 'AnalyticsBounceCount';
  bounceRateCount: Scalars['Int'];
  dateKey: Scalars['String'];
  viewCount: Scalars['Int'];
};

export type AnalyticsBounceCounts = {
  __typename?: 'AnalyticsBounceCounts';
  groupRange: Scalars['Int'];
  groupType: Scalars['String'];
  items: Array<AnalyticsBounceCount>;
};

export type AnalyticsBounceRate = {
  __typename?: 'AnalyticsBounceRate';
  average: Scalars['Float'];
  trend: Scalars['Float'];
};

export type AnalyticsBrowser = {
  __typename?: 'AnalyticsBrowser';
  browser: Scalars['String'];
  count: Scalars['Int'];
  percentage: Scalars['Int'];
};

export type AnalyticsBrowsers = {
  __typename?: 'AnalyticsBrowsers';
  items: Array<AnalyticsBrowser>;
  pagination: CommonPagination;
};

export enum AnalyticsBrowsersSort {
  /** Least amount of browsers first */
  CountAsc = 'count__asc',
  /** Most amount of browsers first */
  CountDesc = 'count__desc'
}

export type AnalyticsCountry = {
  __typename?: 'AnalyticsCountry';
  code: Scalars['String'];
  count: Scalars['Int'];
  name: Scalars['String'];
};

export type AnalyticsDevice = {
  __typename?: 'AnalyticsDevice';
  count: Scalars['Int'];
  type: Scalars['String'];
};

export type AnalyticsDimension = {
  __typename?: 'AnalyticsDimension';
  count: Scalars['Int'];
  deviceX: Scalars['Int'];
};

export type AnalyticsExit = {
  __typename?: 'AnalyticsExit';
  percentage: Scalars['Float'];
  url: Scalars['String'];
};

export type AnalyticsLanguage = {
  __typename?: 'AnalyticsLanguage';
  count: Scalars['Int'];
  name: Scalars['String'];
};

export type AnalyticsPage = {
  __typename?: 'AnalyticsPage';
  averageDuration: Scalars['Int'];
  bounceRateCount: Scalars['Int'];
  bounceRatePercentage: Scalars['Float'];
  exitRateCount: Scalars['Int'];
  exitRatePercentage: Scalars['Float'];
  url: Scalars['String'];
  viewCount: Scalars['Int'];
  viewPercentage: Scalars['Float'];
};

export type AnalyticsPageView = {
  __typename?: 'AnalyticsPageView';
  count: Scalars['Int'];
  dateKey: Scalars['String'];
};

export type AnalyticsPageViewCount = {
  __typename?: 'AnalyticsPageViewCount';
  total: Scalars['Int'];
  trend: Scalars['Int'];
};

export type AnalyticsPageViews = {
  __typename?: 'AnalyticsPageViews';
  groupRange: Scalars['Int'];
  groupType: Scalars['String'];
  items: Array<AnalyticsPageView>;
  total: Scalars['Int'];
  trend: Scalars['Int'];
};

export type AnalyticsPages = {
  __typename?: 'AnalyticsPages';
  items: Array<AnalyticsPage>;
  pagination: CommonPagination;
};

export type AnalyticsPagesPerSession = {
  __typename?: 'AnalyticsPagesPerSession';
  average: Scalars['Float'];
  trend: Scalars['Float'];
};

export enum AnalyticsPagesSort {
  /** Lowest bounce rate first */
  BounceRateAsc = 'bounce_rate__asc',
  /** Highest bounce rate first */
  BounceRateDesc = 'bounce_rate__desc',
  /** Shortest duration first */
  DurationAsc = 'duration__asc',
  /** Longest duration first */
  DurationDesc = 'duration__desc',
  /** Lowest exit rate first */
  ExitRateAsc = 'exit_rate__asc',
  /** Highest exit rate first */
  ExitRateDesc = 'exit_rate__desc',
  /** Least amount of views first */
  ViewsAsc = 'views__asc',
  /** Most amount of views first */
  ViewsDesc = 'views__desc'
}

export type AnalyticsPerPage = {
  __typename?: 'AnalyticsPerPage';
  averageTimeOnPage: AnalyticsPerPageDuration;
  averageVisitsPerSession: AnalyticsPerPageVisitsPerSession;
  bounceRate: AnalyticsPerPageBounceRate;
  browsers: AnalyticsBrowsers;
  countries: Array<AnalyticsCountry>;
  devices: Array<AnalyticsDevice>;
  dimensions: Array<AnalyticsDimension>;
  exitRate: AnalyticsPerPageExitRate;
  languages: Array<AnalyticsLanguage>;
  pageViews: AnalyticsPageViews;
  referrers: AnalyticsReferrers;
  visitsAt: Array<AnalyticsVisitAt>;
};


export type AnalyticsPerPageBrowsersArgs = {
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<AnalyticsBrowsersSort>;
};


export type AnalyticsPerPageReferrersArgs = {
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
};

export type AnalyticsPerPageBounceRate = {
  __typename?: 'AnalyticsPerPageBounceRate';
  average: Scalars['Float'];
  trend: Scalars['Float'];
};

export type AnalyticsPerPageDuration = {
  __typename?: 'AnalyticsPerPageDuration';
  average: Scalars['BigInt'];
  trend: Scalars['BigInt'];
};

export type AnalyticsPerPageExitRate = {
  __typename?: 'AnalyticsPerPageExitRate';
  average: Scalars['Float'];
  trend: Scalars['Float'];
};

export type AnalyticsPerPageVisitsPerSession = {
  __typename?: 'AnalyticsPerPageVisitsPerSession';
  average: Scalars['Float'];
  trend: Scalars['Float'];
};

export type AnalyticsRecording = {
  __typename?: 'AnalyticsRecording';
  count: Scalars['Int'];
  dateKey: Scalars['String'];
};

export type AnalyticsRecordings = {
  __typename?: 'AnalyticsRecordings';
  groupRange: Scalars['Int'];
  groupType: Scalars['String'];
  items: Array<AnalyticsRecording>;
};

export type AnalyticsRecordingsCount = {
  __typename?: 'AnalyticsRecordingsCount';
  new: Scalars['Int'];
  total: Scalars['Int'];
};

export type AnalyticsReferrer = {
  __typename?: 'AnalyticsReferrer';
  count: Scalars['Int'];
  percentage: Scalars['Float'];
  referrer?: Maybe<Scalars['String']>;
};

export type AnalyticsReferrers = {
  __typename?: 'AnalyticsReferrers';
  items: Array<AnalyticsReferrer>;
  pagination: CommonPagination;
};

export type AnalyticsSessionDurations = {
  __typename?: 'AnalyticsSessionDurations';
  average: Scalars['BigInt'];
  trend: Scalars['BigInt'];
};

export type AnalyticsSessionsPerVisitor = {
  __typename?: 'AnalyticsSessionsPerVisitor';
  average: Scalars['Float'];
  trend: Scalars['Float'];
};

export type AnalyticsUserPath = {
  __typename?: 'AnalyticsUserPath';
  path: Array<Scalars['String']>;
};

export type AnalyticsVisitAt = {
  __typename?: 'AnalyticsVisitAt';
  count: Scalars['Int'];
  day: Scalars['String'];
  hour: Scalars['Int'];
};

export type AnalyticsVisitor = {
  __typename?: 'AnalyticsVisitor';
  allCount: Scalars['Int'];
  dateKey: Scalars['String'];
  existingCount: Scalars['Int'];
  newCount: Scalars['Int'];
};

export type AnalyticsVisitors = {
  __typename?: 'AnalyticsVisitors';
  groupRange: Scalars['Int'];
  groupType: Scalars['String'];
  items: Array<AnalyticsVisitor>;
};

export type AnalyticsVisitorsCount = {
  __typename?: 'AnalyticsVisitorsCount';
  new: Scalars['Int'];
  total: Scalars['Int'];
};

/** Autogenerated input type of AnonymisePreferencesUpdate */
export type AnonymisePreferencesUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  formsEnabled: Scalars['Boolean'];
  siteId: Scalars['ID'];
  textEnabled: Scalars['Boolean'];
};

/** Autogenerated input type of AuthConfirm */
export type AuthConfirmInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  token: Scalars['String'];
};

/** Autogenerated input type of AuthPasswordReset */
export type AuthPasswordResetInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
};

/** Autogenerated input type of AuthPasswordUpdate */
export type AuthPasswordUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  password: Scalars['String'];
  resetPasswordToken: Scalars['String'];
};

/** Autogenerated input type of AuthReconfirm */
export type AuthReconfirmInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
};

/** Autogenerated input type of AuthSignUp */
export type AuthSignUpInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  password: Scalars['String'];
};

export type BlogAuthor = {
  __typename?: 'BlogAuthor';
  image: Scalars['String'];
  name: Scalars['String'];
};

export type BlogPost = {
  __typename?: 'BlogPost';
  author: BlogAuthor;
  body: Scalars['String'];
  category: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  draft: Scalars['Boolean'];
  id: Scalars['ID'];
  metaDescription: Scalars['String'];
  metaImage: Scalars['String'];
  scripts: Array<Scalars['String']>;
  slug: Scalars['String'];
  tags: Array<Scalars['String']>;
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type BlogPosts = {
  __typename?: 'BlogPosts';
  categories: Array<Scalars['String']>;
  posts: Array<BlogPost>;
  tags: Array<Scalars['String']>;
};

export type CommonPagination = {
  __typename?: 'CommonPagination';
  pageSize: Scalars['Int'];
  total: Scalars['Int'];
};

export type Consent = {
  __typename?: 'Consent';
  consentMethod: Scalars['String'];
  id: Scalars['ID'];
  languages: Array<Scalars['String']>;
  languagesDefault?: Maybe<Scalars['String']>;
  layout: Scalars['String'];
  name: Scalars['String'];
  privacyPolicyUrl: Scalars['String'];
};

/** Autogenerated input type of ConsentUpdate */
export type ConsentUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  consentMethod?: InputMaybe<Scalars['String']>;
  languages?: InputMaybe<Array<Scalars['String']>>;
  languagesDefault?: InputMaybe<Scalars['String']>;
  layout?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  privacyPolicyUrl?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
};

/** Autogenerated input type of ContactDemo */
export type ContactDemoInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  companyName: Scalars['String'];
  email: Scalars['String'];
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  message: Scalars['String'];
  telephone: Scalars['String'];
  traffic: Scalars['String'];
};

/** Autogenerated input type of Contact */
export type ContactInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  message: Scalars['String'];
  subject: Scalars['String'];
};

/** Autogenerated input type of ContactPartners */
export type ContactPartnersInput = {
  clientCount?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  name: Scalars['String'];
};

/** Autogenerated input type of ContactStartups */
export type ContactStartupsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  name: Scalars['String'];
  trafficCount?: InputMaybe<Scalars['String']>;
  yearsActive?: InputMaybe<Scalars['String']>;
};

export enum Currency {
  Eur = 'EUR',
  Gbp = 'GBP',
  Usd = 'USD'
}

export type Errors = {
  __typename?: 'Errors';
  items: Array<ErrorsItem>;
  pagination: ErrorsPagination;
};

export type ErrorsCount = {
  __typename?: 'ErrorsCount';
  count: Scalars['Int'];
  dateKey: Scalars['String'];
};

export type ErrorsCounts = {
  __typename?: 'ErrorsCounts';
  groupRange: Scalars['Int'];
  groupType: Scalars['String'];
  items: Array<ErrorsCount>;
};

export type ErrorsDetails = {
  __typename?: 'ErrorsDetails';
  colNumber: Scalars['Int'];
  filename: Scalars['String'];
  id: Scalars['ID'];
  lineNumber: Scalars['Int'];
  message: Scalars['String'];
  pages: Array<Scalars['String']>;
  stack: Scalars['String'];
};

export type ErrorsError = {
  __typename?: 'ErrorsError';
  details?: Maybe<ErrorsDetails>;
  recordings: Recordings;
  visitors: Visitors;
};


export type ErrorsErrorRecordingsArgs = {
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<RecordingsSort>;
};


export type ErrorsErrorVisitorsArgs = {
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<VisitorsSort>;
};

export type ErrorsItem = {
  __typename?: 'ErrorsItem';
  errorCount: Scalars['Int'];
  id: Scalars['ID'];
  lastOccurance: Scalars['BigInt'];
  message: Scalars['String'];
  recordingCount: Scalars['Int'];
};

export type ErrorsPagination = {
  __typename?: 'ErrorsPagination';
  pageSize: Scalars['Int'];
  sort: ErrorsSort;
  total: Scalars['Int'];
};

export enum ErrorsSort {
  /** Lest errors first */
  ErrorCountAsc = 'error_count__asc',
  /** Most errors first */
  ErrorCountDesc = 'error_count__desc',
  /** Lest recordings first */
  RecordingCountAsc = 'recording_count__asc',
  /** Most recordings first */
  RecordingCountDesc = 'recording_count__desc',
  /** Lest recent occurances first first */
  TimestampAsc = 'timestamp__asc',
  /** Most recent occurances first first */
  TimestampDesc = 'timestamp__desc'
}

/** Autogenerated input type of EventAddToGroup */
export type EventAddToGroupInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  eventIds: Array<Scalars['ID']>;
  groupIds: Array<Scalars['ID']>;
  siteId: Scalars['ID'];
};

/** Autogenerated input type of EventCaptureCreate */
export type EventCaptureCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  groupIds: Array<Scalars['Int']>;
  name: Scalars['String'];
  rules: Array<EventsRuleInput>;
  siteId: Scalars['ID'];
  type: Scalars['Int'];
};

/** Autogenerated input type of EventCaptureDeleteBulk */
export type EventCaptureDeleteBulkInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  eventIds: Array<Scalars['String']>;
  siteId: Scalars['ID'];
};

/** Autogenerated input type of EventCaptureDelete */
export type EventCaptureDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  eventId: Scalars['ID'];
  siteId: Scalars['ID'];
};

/** Autogenerated input type of EventCaptureUpdate */
export type EventCaptureUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  eventId: Scalars['ID'];
  groupIds: Array<Scalars['Int']>;
  name: Scalars['String'];
  rules: Array<EventsRuleInput>;
  siteId: Scalars['ID'];
};

/** Autogenerated input type of EventGroupCreate */
export type EventGroupCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  siteId: Scalars['ID'];
};

/** Autogenerated input type of EventGroupDelete */
export type EventGroupDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  groupId: Scalars['ID'];
  siteId: Scalars['ID'];
};

export type EventsCapture = {
  __typename?: 'EventsCapture';
  items: Array<EventsCaptureItem>;
  pagination: EventsCapturePagination;
};

export type EventsCaptureItem = {
  __typename?: 'EventsCaptureItem';
  count: Scalars['Int'];
  groupIds: Array<Scalars['String']>;
  groupNames: Array<Scalars['String']>;
  id: Scalars['ID'];
  lastCountedAt?: Maybe<Scalars['ISO8601DateTime']>;
  name: Scalars['String'];
  rules: Array<EventsRule>;
  type: Scalars['Int'];
};

export type EventsCapturePagination = {
  __typename?: 'EventsCapturePagination';
  pageSize: Scalars['Int'];
  sort: EventsCaptureSort;
  total: Scalars['Int'];
};

export enum EventsCaptureSort {
  /** Number of triggered events ascending */
  CountAsc = 'count__asc',
  /** Number of triggered events descending */
  CountDesc = 'count__desc',
  /** Alphabeticaly by name (A-Z) */
  NameAsc = 'name__asc',
  /** Alphabeticaly by name (Z-A) */
  NameDesc = 'name__desc'
}

export enum EventsCondition {
  And = 'and',
  Or = 'or'
}

export type EventsCount = {
  __typename?: 'EventsCount';
  dateKey: Scalars['String'];
  metrics: Array<EventsCountMetric>;
};

export type EventsCountMetric = {
  __typename?: 'EventsCountMetric';
  count: Scalars['Int'];
  id: Scalars['ID'];
  type: EventsType;
};

export type EventsCounts = {
  __typename?: 'EventsCounts';
  groupRange: Scalars['Int'];
  groupType: Scalars['String'];
  items: Array<EventsCount>;
};

export type EventsFeed = {
  __typename?: 'EventsFeed';
  items: Array<FeedCaptureItem>;
  pagination: EventsFeedPagination;
};

export type EventsFeedPagination = {
  __typename?: 'EventsFeedPagination';
  pageSize: Scalars['Int'];
  sort: EventsFeedSort;
  total: Scalars['Int'];
};

export enum EventsFeedSort {
  /** Oldest first */
  TimestampAsc = 'timestamp__asc',
  /** Newest first */
  TimestampDesc = 'timestamp__desc'
}

export type EventsGroup = {
  __typename?: 'EventsGroup';
  id: Scalars['ID'];
  items: Array<EventsCaptureItem>;
  name: Scalars['String'];
};

export enum EventsMatch {
  /** Contains */
  Contains = 'contains',
  /** Exactly equals */
  Equals = 'equals',
  /** Does not contain */
  NotContains = 'not_contains',
  /** Does not exactly equal */
  NotEquals = 'not_equals',
  /** Starts with */
  StartsWith = 'starts_with'
}

export type EventsRule = {
  __typename?: 'EventsRule';
  condition: EventsCondition;
  matcher: EventsMatch;
  value: Scalars['String'];
};

export type EventsRuleInput = {
  condition: EventsCondition;
  matcher: EventsMatch;
  value: Scalars['String'];
};

export type EventsStat = {
  __typename?: 'EventsStat';
  averageEventsPerVisitor: Scalars['Float'];
  count: Scalars['Int'];
  eventOrGroupId: Scalars['String'];
  name: Scalars['String'];
  type: EventsType;
};

export enum EventsType {
  Capture = 'capture',
  Group = 'group'
}

export type FeedCaptureItem = {
  __typename?: 'FeedCaptureItem';
  eventName: Scalars['String'];
  id: Scalars['ID'];
  recording: Recording;
  timestamp: Scalars['ISO8601DateTime'];
  visitor: Visitor;
};

export type Feedback = {
  __typename?: 'Feedback';
  id: Scalars['ID'];
  npsAccentColor?: Maybe<Scalars['String']>;
  npsContactConsentEnabled?: Maybe<Scalars['Boolean']>;
  npsEnabled: Scalars['Boolean'];
  npsExcludedPages: Array<Scalars['String']>;
  npsFollowUpEnabled?: Maybe<Scalars['Boolean']>;
  npsHideLogo: Scalars['Boolean'];
  npsLanguages: Array<Scalars['String']>;
  npsLanguagesDefault?: Maybe<Scalars['String']>;
  npsLayout?: Maybe<Scalars['String']>;
  npsPhrase?: Maybe<Scalars['String']>;
  npsSchedule?: Maybe<Scalars['String']>;
  sentimentAccentColor?: Maybe<Scalars['String']>;
  sentimentDevices: Array<Scalars['String']>;
  sentimentEnabled?: Maybe<Scalars['Boolean']>;
  sentimentExcludedPages: Array<Scalars['String']>;
  sentimentHideLogo: Scalars['Boolean'];
  sentimentLanguages: Array<Scalars['String']>;
  sentimentLanguagesDefault?: Maybe<Scalars['String']>;
  sentimentLayout?: Maybe<Scalars['String']>;
  sentimentSchedule?: Maybe<Scalars['String']>;
};

export enum FeedbackNpsGroup {
  Detractor = 'Detractor',
  Passive = 'Passive',
  Promoter = 'Promoter'
}

export type FeedbackNpsGroups = {
  __typename?: 'FeedbackNpsGroups';
  detractors: Scalars['Int'];
  passives: Scalars['Int'];
  promoters: Scalars['Int'];
};

export type FeedbackNpsRatings = {
  __typename?: 'FeedbackNpsRatings';
  score: Scalars['Int'];
};

export type FeedbackNpsReplies = {
  __typename?: 'FeedbackNpsReplies';
  responses: Array<FeedbackNpsReply>;
  trend: Scalars['Int'];
};

export type FeedbackNpsReply = {
  __typename?: 'FeedbackNpsReply';
  score: Scalars['Int'];
  timestamp: Scalars['ISO8601DateTime'];
};

export type FeedbackNpsResponse = {
  __typename?: 'FeedbackNpsResponse';
  items: Array<FeedbackNpsResponseItem>;
  pagination: FeedbackNpsResponsePagination;
};

export type FeedbackNpsResponseFilters = {
  followUpComment?: InputMaybe<Scalars['Boolean']>;
  outcomeType?: InputMaybe<FeedbackNpsGroup>;
};

export type FeedbackNpsResponseItem = {
  __typename?: 'FeedbackNpsResponseItem';
  comment?: Maybe<Scalars['String']>;
  contact: Scalars['Boolean'];
  device: RecordingsDevice;
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  recordingId: Scalars['String'];
  score: Scalars['Int'];
  sessionId: Scalars['String'];
  timestamp: Scalars['ISO8601DateTime'];
  visitor: Visitor;
};

export type FeedbackNpsResponsePagination = {
  __typename?: 'FeedbackNpsResponsePagination';
  pageSize: Scalars['Int'];
  sort: FeedbackNpsResponseSort;
  total: Scalars['Int'];
};

export enum FeedbackNpsResponseSort {
  /** Oldest response first */
  TimestampAsc = 'timestamp__asc',
  /** Most recent response first */
  TimestampDesc = 'timestamp__desc'
}

export type FeedbackNpsScore = {
  __typename?: 'FeedbackNpsScore';
  score: Scalars['Int'];
  timestamp: Scalars['ISO8601DateTime'];
};

export type FeedbackNpsScores = {
  __typename?: 'FeedbackNpsScores';
  responses: Array<FeedbackNpsScore>;
  score: Scalars['Int'];
  trend: Scalars['Int'];
};

export type FeedbackNpsStats = {
  __typename?: 'FeedbackNpsStats';
  displays: Scalars['Int'];
  ratings: Scalars['Int'];
};

export type FeedbackSentimentRating = {
  __typename?: 'FeedbackSentimentRating';
  score: Scalars['Int'];
  timestamp: Scalars['ISO8601DateTime'];
};

export type FeedbackSentimentRatings = {
  __typename?: 'FeedbackSentimentRatings';
  responses: Array<FeedbackSentimentRating>;
  score: Scalars['Float'];
  trend: Scalars['Float'];
};

export type FeedbackSentimentReplies = {
  __typename?: 'FeedbackSentimentReplies';
  responses: Array<FeedbackSentimentReply>;
  total: Scalars['Int'];
};

export type FeedbackSentimentReply = {
  __typename?: 'FeedbackSentimentReply';
  score: Scalars['Int'];
};

export type FeedbackSentimentResponse = {
  __typename?: 'FeedbackSentimentResponse';
  items: Array<FeedbackSentimentResponseItem>;
  pagination: FeedbackSentimentResponsePagination;
};

export type FeedbackSentimentResponseFilters = {
  followUpComment?: InputMaybe<Scalars['Boolean']>;
  rating?: InputMaybe<Scalars['Int']>;
};

export type FeedbackSentimentResponseItem = {
  __typename?: 'FeedbackSentimentResponseItem';
  comment?: Maybe<Scalars['String']>;
  device: RecordingsDevice;
  id: Scalars['ID'];
  recordingId: Scalars['String'];
  score: Scalars['Int'];
  sessionId: Scalars['String'];
  timestamp: Scalars['ISO8601DateTime'];
  visitor: Visitor;
};

export type FeedbackSentimentResponsePagination = {
  __typename?: 'FeedbackSentimentResponsePagination';
  pageSize: Scalars['Int'];
  sort: FeedbackSentimentResponseSort;
  total: Scalars['Int'];
};

export enum FeedbackSentimentResponseSort {
  /** Oldest response first */
  TimestampAsc = 'timestamp__asc',
  /** Most recent response first */
  TimestampDesc = 'timestamp__desc'
}

/** Autogenerated input type of FeedbackUpdate */
export type FeedbackUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  npsAccentColor?: InputMaybe<Scalars['String']>;
  npsContactConsentEnabled?: InputMaybe<Scalars['Boolean']>;
  npsEnabled?: InputMaybe<Scalars['Boolean']>;
  npsExcludedPages?: InputMaybe<Array<Scalars['String']>>;
  npsFollowUpEnabled?: InputMaybe<Scalars['Boolean']>;
  npsHideLogo?: InputMaybe<Scalars['Boolean']>;
  npsLanguages?: InputMaybe<Array<Scalars['String']>>;
  npsLanguagesDefault?: InputMaybe<Scalars['String']>;
  npsLayout?: InputMaybe<Scalars['String']>;
  npsPhrase?: InputMaybe<Scalars['String']>;
  npsSchedule?: InputMaybe<Scalars['String']>;
  sentimentAccentColor?: InputMaybe<Scalars['String']>;
  sentimentDevices?: InputMaybe<Array<Scalars['String']>>;
  sentimentEnabled?: InputMaybe<Scalars['Boolean']>;
  sentimentExcludedPages?: InputMaybe<Array<Scalars['String']>>;
  sentimentHideLogo?: InputMaybe<Scalars['Boolean']>;
  sentimentLanguages?: InputMaybe<Array<Scalars['String']>>;
  sentimentLanguagesDefault?: InputMaybe<Scalars['String']>;
  sentimentLayout?: InputMaybe<Scalars['String']>;
  sentimentSchedule?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
};

export type FiltersDate = {
  fromDate?: InputMaybe<Scalars['ISO8601Date']>;
  toDate?: InputMaybe<Scalars['ISO8601Date']>;
};

export type FiltersDuration = {
  betweenFromDuration?: InputMaybe<Scalars['Int']>;
  betweenToDuration?: InputMaybe<Scalars['Int']>;
  fromDuration?: InputMaybe<Scalars['Int']>;
  fromType?: InputMaybe<FiltersSize>;
  rangeType?: InputMaybe<FiltersRange>;
};

export enum FiltersRange {
  /** Show results that fit within this time */
  Between = 'Between',
  /** Show results are longer than this time */
  From = 'From',
  /** Show results that are greater than this time */
  GreaterThan = 'GreaterThan',
  /** Show results that are less than this time */
  LessThan = 'LessThan'
}

export type FiltersRecordings = {
  count?: InputMaybe<Scalars['Int']>;
  rangeType?: InputMaybe<FiltersRange>;
};

export enum FiltersSize {
  /** Show recordings that have a duration longer than */
  GreaterThan = 'GreaterThan',
  /** Show recordings that have a duration shorter than */
  LessThan = 'LessThan'
}

export enum FiltersStatus {
  /** Show only new recordings */
  New = 'New',
  /** Show only viewed recordings */
  Viewed = 'Viewed'
}

export type FiltersSuccess = {
  __typename?: 'FiltersSuccess';
  message: Scalars['String'];
};

export type FiltersViewport = {
  maxHeight?: InputMaybe<Scalars['Int']>;
  maxWidth?: InputMaybe<Scalars['Int']>;
  minHeight?: InputMaybe<Scalars['Int']>;
  minWidth?: InputMaybe<Scalars['Int']>;
};

export type Heatmaps = {
  __typename?: 'Heatmaps';
  counts: HeatmapsCounts;
  items: Scalars['String'];
  recording?: Maybe<Recording>;
};

export type HeatmapsCounts = {
  __typename?: 'HeatmapsCounts';
  desktop: Scalars['Int'];
  mobile: Scalars['Int'];
  tablet: Scalars['Int'];
};

export enum HeatmapsDevice {
  /** Show desktop */
  Desktop = 'Desktop',
  /** Show mobile */
  Mobile = 'Mobile',
  /** Show tablet */
  Tablet = 'Tablet'
}

export enum HeatmapsType {
  /** Show click counts */
  ClickCount = 'ClickCount',
  /** Show click positions */
  ClickPosition = 'ClickPosition',
  /** Show mouse positions */
  Cursor = 'Cursor',
  /** Show scrolls */
  Scroll = 'Scroll'
}

export type Mutation = {
  __typename?: 'Mutation';
  adminBlogDeleteImage: FiltersSuccess;
  adminBlogPostCreate: BlogPost;
  adminBlogPostDelete?: Maybe<BlogPost>;
  adminBlogPostUpdate: BlogPost;
  adminBlogSignImage: AdminBlogSignImage;
  adminPartnerInvoiceUpdate?: Maybe<UsersInvoice>;
  adminReferralDelete?: Maybe<UsersReferral>;
  adminSiteAssociateCustomer?: Maybe<AdminSite>;
  adminSiteDelete?: Maybe<AdminSite>;
  adminSiteIngestUpdate?: Maybe<AdminSite>;
  adminSitePlanUpdate?: Maybe<AdminSite>;
  adminUserDelete?: Maybe<User>;
  adminUserPartnerCreate?: Maybe<AdminUser>;
  anonymisePreferencesUpdate: Site;
  authConfirm?: Maybe<User>;
  authPasswordReset?: Maybe<FiltersSuccess>;
  authPasswordUpdate?: Maybe<User>;
  authReconfirm?: Maybe<FiltersSuccess>;
  authSignup?: Maybe<User>;
  bookDemo?: Maybe<FiltersSuccess>;
  consentUpdate: Consent;
  contact?: Maybe<FiltersSuccess>;
  contactPartners?: Maybe<FiltersSuccess>;
  contactStartups?: Maybe<FiltersSuccess>;
  cssSelectorBlacklistCreate: Site;
  cssSelectorBlacklistDelete: Site;
  domainBlacklistCreate: Site;
  domainBlacklistDelete: Site;
  eventAddToGroup?: Maybe<Array<EventsCaptureItem>>;
  eventCaptureCreate: EventsCaptureItem;
  eventCaptureDelete?: Maybe<EventsCaptureItem>;
  eventCaptureDeleteBulk: Array<EventsCaptureItem>;
  eventCaptureUpdate?: Maybe<EventsCaptureItem>;
  eventGroupCreate: EventsGroup;
  eventGroupDelete?: Maybe<EventsGroup>;
  feedbackUpdate: Feedback;
  ipBlacklistCreate: Site;
  ipBlacklistDelete: Site;
  magicErasureUpdate: Site;
  noteCreate: Note;
  noteDelete?: Maybe<Note>;
  noteUpdate?: Maybe<Note>;
  npsCreate: FiltersSuccess;
  npsDelete?: Maybe<FeedbackNpsResponseItem>;
  recordingBookmarked: Recording;
  recordingDelete?: Maybe<Recording>;
  recordingViewed: Recording;
  recordingsDelete: Array<Recording>;
  recordingsViewed: Array<Recording>;
  routesDelete: Site;
  routesUpdate: Site;
  sentimentCreate: FiltersSuccess;
  sentimentDelete?: Maybe<FeedbackSentimentResponseItem>;
  siteCreate: Site;
  siteDelete?: Maybe<Site>;
  siteUpdate: Site;
  siteVerify: Site;
  subscriptionsCreate: SubscriptionsCheckout;
  subscriptionsPortal: SubscriptionsCheckout;
  subscriptionsUpdate: Site;
  superuserAccessUpdate: Site;
  tagCreate: Tag;
  tagDelete?: Maybe<Tag>;
  tagRemove?: Maybe<Tag>;
  tagUpdate?: Maybe<Tag>;
  tagsDelete?: Maybe<Array<Tag>>;
  teamDelete?: Maybe<Team>;
  teamInvite: Team;
  teamInviteAccept: Team;
  teamInviteCancel?: Maybe<Team>;
  teamInviteResend?: Maybe<Team>;
  teamLeave?: Maybe<Team>;
  teamTransfer: Site;
  teamUpdate: Team;
  teamUpdateRole: Team;
  trackingCodeInstructions: FiltersSuccess;
  userCommunication?: Maybe<User>;
  userDelete?: Maybe<User>;
  userInvoiceCreate?: Maybe<UsersInvoice>;
  userInvoiceDelete?: Maybe<UsersInvoice>;
  userInvoiceSignImage: UsersInvoiceSignImage;
  userPassword: User;
  userReferralCreate?: Maybe<UsersReferral>;
  userReferralDelete?: Maybe<UsersReferral>;
  userUpdate: User;
  visitorDelete?: Maybe<Visitor>;
  visitorStarred: Visitor;
};


export type MutationAdminBlogDeleteImageArgs = {
  input: AdminBlogDeleteImageInput;
};


export type MutationAdminBlogPostCreateArgs = {
  input: AdminBlogPostCreateInput;
};


export type MutationAdminBlogPostDeleteArgs = {
  input: AdminBlogPostDeleteInput;
};


export type MutationAdminBlogPostUpdateArgs = {
  input: AdminBlogPostUpdateInput;
};


export type MutationAdminBlogSignImageArgs = {
  input: AdminBlogSignImageInput;
};


export type MutationAdminPartnerInvoiceUpdateArgs = {
  input: AdminPartnerInvoiceUpdateInput;
};


export type MutationAdminReferralDeleteArgs = {
  input: AdminReferralDeleteInput;
};


export type MutationAdminSiteAssociateCustomerArgs = {
  input: AdminSiteAssociateCustomerInput;
};


export type MutationAdminSiteDeleteArgs = {
  input: AdminSiteDeleteInput;
};


export type MutationAdminSiteIngestUpdateArgs = {
  input: AdminSiteIngestUpdateInput;
};


export type MutationAdminSitePlanUpdateArgs = {
  input: AdminSitePlanUpdateInput;
};


export type MutationAdminUserDeleteArgs = {
  input: AdminUserDeleteInput;
};


export type MutationAdminUserPartnerCreateArgs = {
  input: AdminUserPartnerCreateInput;
};


export type MutationAnonymisePreferencesUpdateArgs = {
  input: AnonymisePreferencesUpdateInput;
};


export type MutationAuthConfirmArgs = {
  input: AuthConfirmInput;
};


export type MutationAuthPasswordResetArgs = {
  input: AuthPasswordResetInput;
};


export type MutationAuthPasswordUpdateArgs = {
  input: AuthPasswordUpdateInput;
};


export type MutationAuthReconfirmArgs = {
  input: AuthReconfirmInput;
};


export type MutationAuthSignupArgs = {
  input: AuthSignUpInput;
};


export type MutationBookDemoArgs = {
  input: ContactDemoInput;
};


export type MutationConsentUpdateArgs = {
  input: ConsentUpdateInput;
};


export type MutationContactArgs = {
  input: ContactInput;
};


export type MutationContactPartnersArgs = {
  input: ContactPartnersInput;
};


export type MutationContactStartupsArgs = {
  input: ContactStartupsInput;
};


export type MutationCssSelectorBlacklistCreateArgs = {
  input: SitesCssSelectorBlacklistCreateInput;
};


export type MutationCssSelectorBlacklistDeleteArgs = {
  input: SitesCssSelectorBlacklistDeleteInput;
};


export type MutationDomainBlacklistCreateArgs = {
  input: SitesDomainBlacklistCreateInput;
};


export type MutationDomainBlacklistDeleteArgs = {
  input: SitesDomainBlacklistDeleteInput;
};


export type MutationEventAddToGroupArgs = {
  input: EventAddToGroupInput;
};


export type MutationEventCaptureCreateArgs = {
  input: EventCaptureCreateInput;
};


export type MutationEventCaptureDeleteArgs = {
  input: EventCaptureDeleteInput;
};


export type MutationEventCaptureDeleteBulkArgs = {
  input: EventCaptureDeleteBulkInput;
};


export type MutationEventCaptureUpdateArgs = {
  input: EventCaptureUpdateInput;
};


export type MutationEventGroupCreateArgs = {
  input: EventGroupCreateInput;
};


export type MutationEventGroupDeleteArgs = {
  input: EventGroupDeleteInput;
};


export type MutationFeedbackUpdateArgs = {
  input: FeedbackUpdateInput;
};


export type MutationIpBlacklistCreateArgs = {
  input: SitesIpBlacklistCreateInput;
};


export type MutationIpBlacklistDeleteArgs = {
  input: SitesIpBlacklistDeleteInput;
};


export type MutationMagicErasureUpdateArgs = {
  input: SitesMagicErasureUpdateInput;
};


export type MutationNoteCreateArgs = {
  input: NotesCreateInput;
};


export type MutationNoteDeleteArgs = {
  input: NotesDeleteInput;
};


export type MutationNoteUpdateArgs = {
  input: NotesUpdateInput;
};


export type MutationNpsCreateArgs = {
  input: NpsCreateInput;
};


export type MutationNpsDeleteArgs = {
  input: NpsDeleteInput;
};


export type MutationRecordingBookmarkedArgs = {
  input: RecordingsBookmarkedInput;
};


export type MutationRecordingDeleteArgs = {
  input: RecordingsDeleteInput;
};


export type MutationRecordingViewedArgs = {
  input: RecordingsViewedInput;
};


export type MutationRecordingsDeleteArgs = {
  input: RecordingsDeleteBulkInput;
};


export type MutationRecordingsViewedArgs = {
  input: RecordingsViewedBulkInput;
};


export type MutationRoutesDeleteArgs = {
  input: SitesRoutesDeleteInput;
};


export type MutationRoutesUpdateArgs = {
  input: SitesRoutesUpdateInput;
};


export type MutationSentimentCreateArgs = {
  input: SentimentCreateInput;
};


export type MutationSentimentDeleteArgs = {
  input: SentimentDeleteInput;
};


export type MutationSiteCreateArgs = {
  input: SitesCreateInput;
};


export type MutationSiteDeleteArgs = {
  input: SitesDeleteInput;
};


export type MutationSiteUpdateArgs = {
  input: SitesUpdateInput;
};


export type MutationSiteVerifyArgs = {
  input: SitesVerifyInput;
};


export type MutationSubscriptionsCreateArgs = {
  input: SubscriptionsCreateInput;
};


export type MutationSubscriptionsPortalArgs = {
  input: SubscriptionsPortalInput;
};


export type MutationSubscriptionsUpdateArgs = {
  input: SubscriptionsUpdateInput;
};


export type MutationSuperuserAccessUpdateArgs = {
  input: SitesSuperuserAccessUpdateInput;
};


export type MutationTagCreateArgs = {
  input: TagsCreateInput;
};


export type MutationTagDeleteArgs = {
  input: TagsDeleteInput;
};


export type MutationTagRemoveArgs = {
  input: TagsRemoveInput;
};


export type MutationTagUpdateArgs = {
  input: TagsUpdateInput;
};


export type MutationTagsDeleteArgs = {
  input: TagsDeleteBulkInput;
};


export type MutationTeamDeleteArgs = {
  input: TeamDeleteInput;
};


export type MutationTeamInviteArgs = {
  input: TeamInviteInput;
};


export type MutationTeamInviteAcceptArgs = {
  input: TeamInviteAcceptInput;
};


export type MutationTeamInviteCancelArgs = {
  input: TeamInviteCancelInput;
};


export type MutationTeamInviteResendArgs = {
  input: TeamInviteResendInput;
};


export type MutationTeamLeaveArgs = {
  input: TeamLeaveInput;
};


export type MutationTeamTransferArgs = {
  input: TeamTransferInput;
};


export type MutationTeamUpdateArgs = {
  input: TeamUpdateInput;
};


export type MutationTeamUpdateRoleArgs = {
  input: TeamUpdateRoleInput;
};


export type MutationTrackingCodeInstructionsArgs = {
  input: SitesTrackingCodeInstructionsInput;
};


export type MutationUserCommunicationArgs = {
  input: UsersCommunicationInput;
};


export type MutationUserDeleteArgs = {
  input: UsersDeleteInput;
};


export type MutationUserInvoiceCreateArgs = {
  input: UsersInvoiceCreateInput;
};


export type MutationUserInvoiceDeleteArgs = {
  input: UsersInvoiceDeleteInput;
};


export type MutationUserInvoiceSignImageArgs = {
  input: UsersInvoiceSignImageInput;
};


export type MutationUserPasswordArgs = {
  input: UsersPasswordInput;
};


export type MutationUserReferralCreateArgs = {
  input: UsersReferralCreateInput;
};


export type MutationUserReferralDeleteArgs = {
  input: UsersReferralDeleteInput;
};


export type MutationUserUpdateArgs = {
  input: UsersUpdateInput;
};


export type MutationVisitorDeleteArgs = {
  input: VisitorsDeleteInput;
};


export type MutationVisitorStarredArgs = {
  input: VisitorsStarredInput;
};

export type Note = {
  __typename?: 'Note';
  body: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  recordingId: Scalars['Int'];
  sessionId?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['Int']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user?: Maybe<User>;
};

export type Notes = {
  __typename?: 'Notes';
  items: Array<Note>;
  pagination: NotesPagination;
};

/** Autogenerated input type of NotesCreate */
export type NotesCreateInput = {
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  recordingId: Scalars['ID'];
  siteId: Scalars['ID'];
  timestamp?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated input type of NotesDelete */
export type NotesDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  noteId: Scalars['ID'];
  recordingId: Scalars['ID'];
  siteId: Scalars['ID'];
};

export type NotesPagination = {
  __typename?: 'NotesPagination';
  pageSize: Scalars['Int'];
  total: Scalars['Int'];
};

/** Autogenerated input type of NotesUpdate */
export type NotesUpdateInput = {
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  noteId: Scalars['ID'];
  recordingId: Scalars['ID'];
  siteId: Scalars['ID'];
  timestamp?: InputMaybe<Scalars['Int']>;
};

export type Nps = {
  __typename?: 'Nps';
  groups: FeedbackNpsGroups;
  ratings: Array<FeedbackNpsRatings>;
  replies: FeedbackNpsReplies;
  responses: FeedbackNpsResponse;
  scores: FeedbackNpsScores;
  stats: FeedbackNpsStats;
};


export type NpsResponsesArgs = {
  filters?: InputMaybe<FeedbackNpsResponseFilters>;
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<FeedbackNpsResponseSort>;
};

/** Autogenerated input type of NpsCreate */
export type NpsCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  comment?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['Boolean']>;
  email?: InputMaybe<Scalars['String']>;
  score: Scalars['Int'];
  sessionId: Scalars['String'];
  siteId: Scalars['ID'];
  visitorId: Scalars['String'];
};

/** Autogenerated input type of NpsDelete */
export type NpsDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  npsId: Scalars['ID'];
  siteId: Scalars['ID'];
};

export type Page = {
  __typename?: 'Page';
  enteredAt: Scalars['ISO8601DateTime'];
  exitedAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  url: Scalars['String'];
};

export enum PathPosition {
  End = 'End',
  Start = 'Start'
}

export type Plan = {
  __typename?: 'Plan';
  dataStorageMonths?: Maybe<Scalars['Int']>;
  deprecated: Scalars['Boolean'];
  enterprise: Scalars['Boolean'];
  featuresEnabled: Array<PlanFeature>;
  free: Scalars['Boolean'];
  id: Scalars['ID'];
  maxMonthlyRecordings?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  pricing?: Maybe<Array<PlanPrice>>;
  responseTimeHours?: Maybe<Scalars['Int']>;
  support?: Maybe<Array<Scalars['String']>>;
  teamMemberLimit?: Maybe<Scalars['Int']>;
};

export enum PlanFeature {
  Dashboard = 'dashboard',
  ErrorTracking = 'error_tracking',
  EventTracking = 'event_tracking',
  HeatmapsClickCounts = 'heatmaps_click_counts',
  HeatmapsClickPositions = 'heatmaps_click_positions',
  HeatmapsMouse = 'heatmaps_mouse',
  HeatmapsScroll = 'heatmaps_scroll',
  Journeys = 'journeys',
  Nps = 'nps',
  PageAnalytics = 'page_analytics',
  Recordings = 'recordings',
  Sentiment = 'sentiment',
  SiteAnalytics = 'site_analytics',
  Visitors = 'visitors'
}

export type PlanPrice = {
  __typename?: 'PlanPrice';
  amount: Scalars['Float'];
  currency: Currency;
  id: Scalars['String'];
  interval: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  admin: Admin;
  blogPost?: Maybe<BlogPost>;
  blogPosts?: Maybe<BlogPosts>;
  partner?: Maybe<Scalars['String']>;
  plans: Array<Plan>;
  site?: Maybe<Site>;
  siteByUuid?: Maybe<Site>;
  siteSessionSettings?: Maybe<SiteSessionSettings>;
  sites: Array<Site>;
  user?: Maybe<User>;
  userExists: Scalars['Boolean'];
  userInvitation?: Maybe<UsersInvitation>;
};


export type QueryBlogPostArgs = {
  slug: Scalars['String'];
};


export type QueryBlogPostsArgs = {
  category?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
};


export type QueryPartnerArgs = {
  slug: Scalars['String'];
};


export type QuerySiteArgs = {
  siteId: Scalars['ID'];
};


export type QuerySiteByUuidArgs = {
  siteId: Scalars['ID'];
};


export type QuerySiteSessionSettingsArgs = {
  siteId: Scalars['String'];
};


export type QueryUserExistsArgs = {
  email: Scalars['String'];
};


export type QueryUserInvitationArgs = {
  token: Scalars['String'];
};

export type Recording = {
  __typename?: 'Recording';
  activityDuration?: Maybe<Scalars['BigInt']>;
  bookmarked: Scalars['Boolean'];
  connectedAt?: Maybe<Scalars['ISO8601DateTime']>;
  countryCode?: Maybe<Scalars['String']>;
  countryName?: Maybe<Scalars['String']>;
  device: RecordingsDevice;
  disconnectedAt?: Maybe<Scalars['ISO8601DateTime']>;
  duration: Scalars['BigInt'];
  events?: Maybe<RecordingsEvents>;
  exitPage: Scalars['String'];
  id: Scalars['ID'];
  inactivity: Array<Array<Scalars['BigInt']>>;
  language: Scalars['String'];
  notes: Array<Note>;
  nps?: Maybe<FeedbackNpsResponseItem>;
  pageCount: Scalars['Int'];
  pageViews: Array<Scalars['String']>;
  pages: Array<Page>;
  referrer?: Maybe<Scalars['String']>;
  sentiment?: Maybe<FeedbackSentimentResponseItem>;
  sessionId: Scalars['String'];
  siteId: Scalars['ID'];
  startPage: Scalars['String'];
  tags: Array<Tag>;
  timezone?: Maybe<Scalars['String']>;
  viewed: Scalars['Boolean'];
  visitor: Visitor;
};


export type RecordingEventsArgs = {
  page?: InputMaybe<Scalars['Int']>;
};

export type Recordings = {
  __typename?: 'Recordings';
  items: Array<Recording>;
  pagination: RecordingsPagination;
};

/** Autogenerated input type of RecordingsBookmarked */
export type RecordingsBookmarkedInput = {
  bookmarked: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  recordingId: Scalars['ID'];
  siteId: Scalars['ID'];
};

export type RecordingsCountry = {
  __typename?: 'RecordingsCountry';
  code: Scalars['String'];
  count: Scalars['Int'];
  name: Scalars['String'];
};

/** Autogenerated input type of RecordingsDeleteBulk */
export type RecordingsDeleteBulkInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  recordingIds: Array<Scalars['String']>;
  siteId: Scalars['ID'];
};

/** Autogenerated input type of RecordingsDelete */
export type RecordingsDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  recordingId: Scalars['ID'];
  siteId: Scalars['ID'];
};

export type RecordingsDevice = {
  __typename?: 'RecordingsDevice';
  browserDetails: Scalars['String'];
  browserName: Scalars['String'];
  deviceType: Scalars['String'];
  deviceX: Scalars['Int'];
  deviceY: Scalars['Int'];
  useragent: Scalars['String'];
  viewportX: Scalars['Int'];
  viewportY: Scalars['Int'];
};

export type RecordingsEvent = {
  __typename?: 'RecordingsEvent';
  data: Scalars['Event'];
  id: Scalars['ID'];
  timestamp: Scalars['BigInt'];
  type: Scalars['Int'];
};

export type RecordingsEventPagination = {
  __typename?: 'RecordingsEventPagination';
  currentPage: Scalars['Int'];
  totalPages: Scalars['Int'];
};

export type RecordingsEvents = {
  __typename?: 'RecordingsEvents';
  items: Array<RecordingsEvent>;
  pagination: RecordingsEventPagination;
};

export type RecordingsFilters = {
  bookmarked?: InputMaybe<Scalars['Boolean']>;
  browsers: Array<Scalars['String']>;
  devices: Array<Scalars['String']>;
  duration: FiltersDuration;
  exitUrl?: InputMaybe<Scalars['String']>;
  languages: Array<Scalars['String']>;
  referrers: Array<Scalars['String']>;
  starred?: InputMaybe<Scalars['Boolean']>;
  startUrl?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<FiltersStatus>;
  tags: Array<Scalars['Int']>;
  unvisitedPages: Array<Scalars['String']>;
  utmCampaign?: InputMaybe<Scalars['String']>;
  utmContent?: InputMaybe<Scalars['String']>;
  utmMedium?: InputMaybe<Scalars['String']>;
  utmSource?: InputMaybe<Scalars['String']>;
  utmTerm?: InputMaybe<Scalars['String']>;
  viewport: FiltersViewport;
  visitedPages: Array<Scalars['String']>;
};

export type RecordingsHighlights = {
  __typename?: 'RecordingsHighlights';
  eventful: Array<Recording>;
  longest: Array<Recording>;
};

export type RecordingsPagination = {
  __typename?: 'RecordingsPagination';
  pageSize: Scalars['Int'];
  sort: RecordingsSort;
  total: Scalars['Int'];
};

export enum RecordingsSort {
  /** Least active recordings first */
  ActivityAsc = 'activity__asc',
  /** Most active recordings first */
  ActivityDesc = 'activity__desc',
  /** Oldest recordings first */
  ConnectedAtAsc = 'connected_at__asc',
  /** Most recent recordings first */
  ConnectedAtDesc = 'connected_at__desc',
  /** Shortest recordings first */
  DurationAsc = 'duration__asc',
  /** Longest recordings first */
  DurationDesc = 'duration__desc',
  /** Least page views first */
  PageCountAsc = 'page_count__asc',
  /** Most page views first */
  PageCountDesc = 'page_count__desc'
}

/** Autogenerated input type of RecordingsViewedBulk */
export type RecordingsViewedBulkInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  recordingIds: Array<Scalars['String']>;
  siteId: Scalars['ID'];
  viewed: Scalars['Boolean'];
};

/** Autogenerated input type of RecordingsViewed */
export type RecordingsViewedInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  recordingId: Scalars['ID'];
  siteId: Scalars['ID'];
};

export type Sentiment = {
  __typename?: 'Sentiment';
  ratings: FeedbackSentimentRatings;
  replies: FeedbackSentimentReplies;
  responses: FeedbackSentimentResponse;
};


export type SentimentResponsesArgs = {
  filters?: InputMaybe<FeedbackSentimentResponseFilters>;
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<FeedbackSentimentResponseSort>;
};

/** Autogenerated input type of SentimentCreate */
export type SentimentCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  comment?: InputMaybe<Scalars['String']>;
  score: Scalars['Int'];
  sessionId: Scalars['String'];
  siteId: Scalars['ID'];
  visitorId: Scalars['String'];
};

/** Autogenerated input type of SentimentDelete */
export type SentimentDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  sentimentId: Scalars['ID'];
  siteId: Scalars['ID'];
};

export type Site = {
  __typename?: 'Site';
  activeUserCount: Scalars['Int'];
  analytics: Analytics;
  anonymiseFormInputs: Scalars['Boolean'];
  anonymiseText: Scalars['Boolean'];
  billing?: Maybe<SiteBilling>;
  browsers: Array<Scalars['String']>;
  consent: Consent;
  countries: Array<RecordingsCountry>;
  createdAt: Scalars['ISO8601DateTime'];
  cssSelectorBlacklist: Array<Scalars['String']>;
  daysSinceLastRecording: Scalars['Int'];
  domainBlacklist: Array<SitesDomainBlacklist>;
  error: ErrorsError;
  errors: Errors;
  errorsCounts: ErrorsCounts;
  eventCapture: EventsCapture;
  eventCounts: EventsCounts;
  eventFeed: EventsFeed;
  eventGroups: Array<EventsGroup>;
  eventStats: Array<EventsStat>;
  feedback: Feedback;
  heatmaps: Heatmaps;
  id: Scalars['ID'];
  ipBlacklist: Array<SitesIpBlacklist>;
  languages: Array<Scalars['String']>;
  magicErasureEnabled: Scalars['Boolean'];
  name: Scalars['String'];
  notes: Notes;
  nps: Nps;
  ownerName: Scalars['String'];
  pageUrls: Array<Scalars['String']>;
  pages: Array<SitesPage>;
  plan?: Maybe<SitesPlan>;
  provider?: Maybe<Scalars['String']>;
  providerUuid?: Maybe<Scalars['String']>;
  recording?: Maybe<Recording>;
  recordingLatest?: Maybe<Recording>;
  recordings: Recordings;
  recordingsCount: Scalars['Int'];
  recordingsHighlights: RecordingsHighlights;
  referrers: Array<Scalars['String']>;
  routes: Array<Scalars['String']>;
  sentiment: Sentiment;
  siteType: Scalars['Int'];
  superuserAccessEnabled: Scalars['Boolean'];
  tags: Array<Tag>;
  team: Array<Team>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  url: Scalars['String'];
  utmCampaigns: Array<Scalars['String']>;
  utmContents: Array<Scalars['String']>;
  utmMediums: Array<Scalars['String']>;
  utmSources: Array<Scalars['String']>;
  utmTerms: Array<Scalars['String']>;
  uuid: Scalars['String'];
  verifiedAt?: Maybe<Scalars['ISO8601DateTime']>;
  visitor?: Maybe<Visitor>;
  visitors: Visitors;
  visitorsHighlights: VisitorsHighlights;
};


export type SiteAnalyticsArgs = {
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};


export type SiteErrorArgs = {
  errorId: Scalars['ID'];
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};


export type SiteErrorsArgs = {
  fromDate: Scalars['ISO8601Date'];
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<ErrorsSort>;
  toDate: Scalars['ISO8601Date'];
};


export type SiteErrorsCountsArgs = {
  errorId?: InputMaybe<Scalars['ID']>;
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};


export type SiteEventCaptureArgs = {
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<EventsCaptureSort>;
};


export type SiteEventCountsArgs = {
  captureIds?: Array<Scalars['ID']>;
  fromDate: Scalars['ISO8601Date'];
  groupIds?: Array<Scalars['ID']>;
  toDate: Scalars['ISO8601Date'];
};


export type SiteEventFeedArgs = {
  captureIds: Array<Scalars['ID']>;
  fromDate: Scalars['ISO8601Date'];
  groupIds: Array<Scalars['ID']>;
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<EventsFeedSort>;
  toDate: Scalars['ISO8601Date'];
};


export type SiteEventStatsArgs = {
  captureIds?: Array<Scalars['ID']>;
  fromDate: Scalars['ISO8601Date'];
  groupIds?: Array<Scalars['ID']>;
  toDate: Scalars['ISO8601Date'];
};


export type SiteHeatmapsArgs = {
  device?: HeatmapsDevice;
  excludeRecordingIds?: InputMaybe<Array<Scalars['ID']>>;
  fromDate: Scalars['ISO8601Date'];
  page: Scalars['String'];
  toDate: Scalars['ISO8601Date'];
  type: HeatmapsType;
};


export type SiteNotesArgs = {
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
};


export type SiteNpsArgs = {
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};


export type SitePagesArgs = {
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};


export type SiteRecordingArgs = {
  recordingId: Scalars['ID'];
};


export type SiteRecordingsArgs = {
  filters?: InputMaybe<RecordingsFilters>;
  fromDate: Scalars['ISO8601Date'];
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<RecordingsSort>;
  toDate: Scalars['ISO8601Date'];
};


export type SiteRecordingsHighlightsArgs = {
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};


export type SiteSentimentArgs = {
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};


export type SiteVisitorArgs = {
  visitorId: Scalars['ID'];
};


export type SiteVisitorsArgs = {
  filters?: InputMaybe<VisitorsFilters>;
  fromDate: Scalars['ISO8601Date'];
  page?: InputMaybe<Scalars['Int']>;
  search?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<VisitorsSort>;
  toDate: Scalars['ISO8601Date'];
};


export type SiteVisitorsHighlightsArgs = {
  fromDate: Scalars['ISO8601Date'];
  toDate: Scalars['ISO8601Date'];
};

export type SiteBilling = {
  __typename?: 'SiteBilling';
  billingAddress?: Maybe<SitesBillingAddress>;
  billingEmail?: Maybe<Scalars['String']>;
  billingName?: Maybe<Scalars['String']>;
  cardNumber?: Maybe<Scalars['String']>;
  cardType?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customerId: Scalars['String'];
  expiry?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  status: SubscriptionsStatus;
  taxIds: Array<SitesTaxId>;
  transactions: Array<SubscriptionsTransaction>;
};

export type SiteSessionSettings = {
  __typename?: 'SiteSessionSettings';
  anonymiseFormInputs: Scalars['Boolean'];
  anonymiseText: Scalars['Boolean'];
  consent?: Maybe<Consent>;
  cssSelectorBlacklist: Array<Scalars['String']>;
  feedback?: Maybe<Feedback>;
  ingestEnabled: Scalars['Boolean'];
  invalidOrExceededPlan: Scalars['Boolean'];
  ipBlacklist: Array<SitesIpBlacklist>;
  magicErasureEnabled: Scalars['Boolean'];
  name: Scalars['String'];
  url: Scalars['String'];
  uuid: Scalars['String'];
};

export type SitesBillingAddress = {
  __typename?: 'SitesBillingAddress';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type SitesBundle = {
  __typename?: 'SitesBundle';
  id: Scalars['ID'];
  name: Scalars['String'];
  plan: SitesPlan;
  sites: Array<AdminSite>;
};

/** Autogenerated input type of SitesCreate */
export type SitesCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  siteType?: InputMaybe<Scalars['Int']>;
  url: Scalars['String'];
};

/** Autogenerated input type of SitesCssSelectorBlacklistCreate */
export type SitesCssSelectorBlacklistCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  selector: Scalars['String'];
  siteId: Scalars['ID'];
};

/** Autogenerated input type of SitesCssSelectorBlacklistDelete */
export type SitesCssSelectorBlacklistDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  selector: Scalars['String'];
  siteId: Scalars['ID'];
};

/** Autogenerated input type of SitesDelete */
export type SitesDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
};

export type SitesDomainBlacklist = {
  __typename?: 'SitesDomainBlacklist';
  type: SitesDomainBlacklistTarget;
  value: Scalars['String'];
};

/** Autogenerated input type of SitesDomainBlacklistCreate */
export type SitesDomainBlacklistCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
  type: Scalars['String'];
  value: Scalars['String'];
};

/** Autogenerated input type of SitesDomainBlacklistDelete */
export type SitesDomainBlacklistDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
  value: Scalars['String'];
};

export enum SitesDomainBlacklistTarget {
  /** Blacklist a whole domain */
  Domain = 'domain',
  /** Blacklist an individual email */
  Email = 'email'
}

export type SitesIpBlacklist = {
  __typename?: 'SitesIpBlacklist';
  name: Scalars['String'];
  value: Scalars['String'];
};

/** Autogenerated input type of SitesIpBlacklistCreate */
export type SitesIpBlacklistCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  siteId: Scalars['ID'];
  value: Scalars['String'];
};

/** Autogenerated input type of SitesIpBlacklistDelete */
export type SitesIpBlacklistDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
  value: Scalars['String'];
};

/** Autogenerated input type of SitesMagicErasureUpdate */
export type SitesMagicErasureUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  enabled: Scalars['Boolean'];
  siteId: Scalars['ID'];
};

export type SitesPage = {
  __typename?: 'SitesPage';
  count: Scalars['Int'];
  url: Scalars['String'];
};

export type SitesPlan = {
  __typename?: 'SitesPlan';
  auditTrailEnabled: Scalars['Boolean'];
  dataStorageMonths: Scalars['Int'];
  deprecated: Scalars['Boolean'];
  enterprise: Scalars['Boolean'];
  exceeded: Scalars['Boolean'];
  featuresEnabled: Array<Scalars['String']>;
  free: Scalars['Boolean'];
  id: Scalars['ID'];
  invalid: Scalars['Boolean'];
  maxMonthlyRecordings: Scalars['Int'];
  name: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  planId: Scalars['String'];
  privateInstanceEnabled: Scalars['Boolean'];
  responseTimeHours: Scalars['Int'];
  ssoEnabled: Scalars['Boolean'];
  support?: Maybe<Array<Scalars['String']>>;
  teamMemberLimit?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of SitesRoutesDelete */
export type SitesRoutesDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  route: Scalars['String'];
  siteId: Scalars['ID'];
};

/** Autogenerated input type of SitesRoutesUpdate */
export type SitesRoutesUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  routes: Array<Scalars['String']>;
  siteId: Scalars['ID'];
};

/** Autogenerated input type of SitesSuperuserAccessUpdate */
export type SitesSuperuserAccessUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  enabled: Scalars['Boolean'];
  siteId: Scalars['ID'];
};

export type SitesTaxId = {
  __typename?: 'SitesTaxId';
  type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of SitesTrackingCodeInstructions */
export type SitesTrackingCodeInstructionsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  firstName: Scalars['String'];
  siteId: Scalars['ID'];
};

/** Autogenerated input type of SitesUpdate */
export type SitesUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
  siteType?: InputMaybe<Scalars['Int']>;
  url?: InputMaybe<Scalars['String']>;
};

/** Autogenerated input type of SitesVerify */
export type SitesVerifyInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
};

export type SubscriptionsCheckout = {
  __typename?: 'SubscriptionsCheckout';
  customerId: Scalars['String'];
  redirectUrl: Scalars['String'];
};

/** Autogenerated input type of SubscriptionsCreate */
export type SubscriptionsCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  pricingId: Scalars['String'];
  siteId: Scalars['ID'];
};

/** Autogenerated input type of SubscriptionsPortal */
export type SubscriptionsPortalInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
};

export enum SubscriptionsStatus {
  /** Customer has failed to pay a bill */
  Invalid = 'invalid',
  /** Customer has not made it through checkout */
  New = 'new',
  /** Customer has made it through checkout, but the status is pending */
  Open = 'open',
  /** Customer is up to date with their bills */
  Valid = 'valid'
}

export type SubscriptionsTransaction = {
  __typename?: 'SubscriptionsTransaction';
  amount: Scalars['Float'];
  currency: Currency;
  discountAmount?: Maybe<Scalars['Float']>;
  discountId?: Maybe<Scalars['String']>;
  discountName?: Maybe<Scalars['String']>;
  discountPercentage?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  interval: Scalars['String'];
  invoicePdfUrl: Scalars['String'];
  invoiceWebUrl: Scalars['String'];
  periodEndAt: Scalars['ISO8601Date'];
  periodStartAt: Scalars['ISO8601Date'];
  plan?: Maybe<Plan>;
};

/** Autogenerated input type of SubscriptionsUpdate */
export type SubscriptionsUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  pricingId: Scalars['String'];
  siteId: Scalars['ID'];
};

export type Tag = {
  __typename?: 'Tag';
  id: Scalars['ID'];
  name: Scalars['String'];
};

/** Autogenerated input type of TagsCreate */
export type TagsCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  recordingId: Scalars['ID'];
  siteId: Scalars['ID'];
};

/** Autogenerated input type of TagsDeleteBulk */
export type TagsDeleteBulkInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
  tagIds: Array<Scalars['ID']>;
};

/** Autogenerated input type of TagsDelete */
export type TagsDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
  tagId: Scalars['ID'];
};

/** Autogenerated input type of TagsRemove */
export type TagsRemoveInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  recordingId: Scalars['ID'];
  siteId: Scalars['ID'];
  tagId: Scalars['ID'];
};

/** Autogenerated input type of TagsUpdate */
export type TagsUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  siteId: Scalars['ID'];
  tagId: Scalars['ID'];
};

export type Team = {
  __typename?: 'Team';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  linkedDataVisible: Scalars['Boolean'];
  role: Scalars['Int'];
  roleName: Scalars['String'];
  status: Scalars['Int'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user: User;
};

/** Autogenerated input type of TeamDelete */
export type TeamDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
  teamId: Scalars['ID'];
};

/** Autogenerated input type of TeamInviteAccept */
export type TeamInviteAcceptInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  password?: InputMaybe<Scalars['String']>;
  token: Scalars['String'];
};

/** Autogenerated input type of TeamInviteCancel */
export type TeamInviteCancelInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
  teamId: Scalars['ID'];
};

/** Autogenerated input type of TeamInvite */
export type TeamInviteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  role: Scalars['Int'];
  siteId: Scalars['ID'];
};

/** Autogenerated input type of TeamInviteResend */
export type TeamInviteResendInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
  teamId: Scalars['ID'];
};

/** Autogenerated input type of TeamLeave */
export type TeamLeaveInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
};

/** Autogenerated input type of TeamTransfer */
export type TeamTransferInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
  teamId: Scalars['ID'];
};

/** Autogenerated input type of TeamUpdate */
export type TeamUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  linkedDataVisible?: InputMaybe<Scalars['Boolean']>;
  siteId: Scalars['ID'];
  teamId: Scalars['ID'];
};

/** Autogenerated input type of TeamUpdateRole */
export type TeamUpdateRoleInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  role: Scalars['Int'];
  siteId: Scalars['ID'];
  teamId: Scalars['ID'];
};

export type User = {
  __typename?: 'User';
  communication?: Maybe<UsersCommunication>;
  createdAt: Scalars['ISO8601DateTime'];
  email: Scalars['String'];
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lastActivityAt?: Maybe<Scalars['ISO8601DateTime']>;
  lastName?: Maybe<Scalars['String']>;
  partner?: Maybe<UsersPartner>;
  provider?: Maybe<Scalars['String']>;
  superuser: Scalars['Boolean'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type UsersCommunication = {
  __typename?: 'UsersCommunication';
  feedbackEmail: Scalars['Boolean'];
  id: Scalars['ID'];
  knowledgeSharingEmail: Scalars['Boolean'];
  marketingAndSpecialOffersEmail: Scalars['Boolean'];
  monthlyReviewEmail: Scalars['Boolean'];
  onboardingEmail: Scalars['Boolean'];
  productUpdatesEmail: Scalars['Boolean'];
  weeklyReviewEmail: Scalars['Boolean'];
};

/** Autogenerated input type of UsersCommunication */
export type UsersCommunicationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  feedbackEmail?: InputMaybe<Scalars['Boolean']>;
  knowledgeSharingEmail?: InputMaybe<Scalars['Boolean']>;
  marketingAndSpecialOffersEmail?: InputMaybe<Scalars['Boolean']>;
  monthlyReviewEmail?: InputMaybe<Scalars['Boolean']>;
  onboardingEmail?: InputMaybe<Scalars['Boolean']>;
  productUpdatesEmail?: InputMaybe<Scalars['Boolean']>;
  weeklyReviewEmail?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated input type of UsersDelete */
export type UsersDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

export type UsersInvitation = {
  __typename?: 'UsersInvitation';
  email?: Maybe<Scalars['String']>;
  hasPending: Scalars['Boolean'];
};

export type UsersInvoice = {
  __typename?: 'UsersInvoice';
  amount: Scalars['Float'];
  currency: Currency;
  dueAt?: Maybe<Scalars['ISO8601DateTime']>;
  filename: Scalars['String'];
  id: Scalars['ID'];
  invoiceUrl: Scalars['String'];
  issuedAt?: Maybe<Scalars['ISO8601DateTime']>;
  paidAt?: Maybe<Scalars['ISO8601DateTime']>;
  status: Scalars['Int'];
};

/** Autogenerated input type of UsersInvoiceCreate */
export type UsersInvoiceCreateInput = {
  amount: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  currency: Currency;
  filename: Scalars['String'];
};

/** Autogenerated input type of UsersInvoiceDelete */
export type UsersInvoiceDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

export type UsersInvoiceSignImage = {
  __typename?: 'UsersInvoiceSignImage';
  fields: Scalars['String'];
  url: Scalars['String'];
};

/** Autogenerated input type of UsersInvoiceSignImage */
export type UsersInvoiceSignImageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  filename: Scalars['String'];
};

export type UsersPartner = {
  __typename?: 'UsersPartner';
  allTimeCommission: Array<UsersPayment>;
  id: Scalars['ID'];
  invoices: Array<UsersInvoice>;
  name: Scalars['String'];
  payOuts: Array<UsersPayment>;
  referrals: Array<UsersReferral>;
  slug: Scalars['String'];
};

/** Autogenerated input type of UsersPassword */
export type UsersPasswordInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  currentPassword: Scalars['String'];
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
};

export type UsersPayment = {
  __typename?: 'UsersPayment';
  amount: Scalars['Float'];
  currency: Currency;
  id: Scalars['ID'];
};

export type UsersReferral = {
  __typename?: 'UsersReferral';
  id: Scalars['ID'];
  site?: Maybe<Site>;
  url: Scalars['String'];
};

/** Autogenerated input type of UsersReferralCreate */
export type UsersReferralCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  url: Scalars['String'];
};

/** Autogenerated input type of UsersReferralDelete */
export type UsersReferralDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of UsersUpdate */
export type UsersUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
};

export type Visitor = {
  __typename?: 'Visitor';
  averageSessionDuration: Scalars['Int'];
  countries: Array<RecordingsCountry>;
  createdAt: Scalars['ISO8601DateTime'];
  devices: Array<RecordingsDevice>;
  export: VisitorsExport;
  firstViewedAt?: Maybe<Scalars['ISO8601DateTime']>;
  id: Scalars['ID'];
  language?: Maybe<Scalars['String']>;
  lastActivityAt?: Maybe<Scalars['ISO8601DateTime']>;
  linkedData?: Maybe<Scalars['String']>;
  pageViewsCount?: Maybe<VisitorsPagesCount>;
  pages: VisitorsPages;
  pagesPerSession: Scalars['Float'];
  recordingCount?: Maybe<VisitorsRecordingCount>;
  recordings: Recordings;
  starred?: Maybe<Scalars['Boolean']>;
  viewed?: Maybe<Scalars['Boolean']>;
  visitorId: Scalars['String'];
};


export type VisitorPagesArgs = {
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<VisitorsPagesSort>;
};


export type VisitorRecordingsArgs = {
  excludeRecordingIds?: InputMaybe<Array<Scalars['ID']>>;
  page?: InputMaybe<Scalars['Int']>;
  size?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<RecordingsSort>;
};

export type Visitors = {
  __typename?: 'Visitors';
  items: Array<Visitor>;
  pagination: VisitorsPagination;
};

/** Autogenerated input type of VisitorsDelete */
export type VisitorsDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
  visitorId: Scalars['ID'];
};

export type VisitorsExport = {
  __typename?: 'VisitorsExport';
  linkedData?: Maybe<Scalars['String']>;
  npsFeedback: Array<FeedbackNpsResponseItem>;
  recordingsCount: Scalars['Int'];
  sentimentFeedback: Array<FeedbackSentimentResponseItem>;
};

export type VisitorsFilters = {
  browsers: Array<Scalars['String']>;
  firstVisited?: InputMaybe<FiltersDate>;
  languages: Array<Scalars['String']>;
  lastActivity?: InputMaybe<FiltersDate>;
  recordings: FiltersRecordings;
  referrers: Array<Scalars['String']>;
  starred?: InputMaybe<Scalars['Boolean']>;
  status?: InputMaybe<FiltersStatus>;
  unvisitedPages: Array<Scalars['String']>;
  visitedPages: Array<Scalars['String']>;
};

export type VisitorsHighlights = {
  __typename?: 'VisitorsHighlights';
  active: Array<Visitor>;
  newest: Array<Visitor>;
};

export type VisitorsPage = {
  __typename?: 'VisitorsPage';
  averageTimeOnPage: Scalars['Int'];
  pageView: Scalars['String'];
  pageViewCount: Scalars['Int'];
};

export type VisitorsPagePagination = {
  __typename?: 'VisitorsPagePagination';
  pageSize: Scalars['Int'];
  sort: VisitorsPagesSort;
  total: Scalars['Int'];
};

export type VisitorsPages = {
  __typename?: 'VisitorsPages';
  items: Array<VisitorsPage>;
  pagination: VisitorsPagePagination;
};

export type VisitorsPagesCount = {
  __typename?: 'VisitorsPagesCount';
  total: Scalars['Int'];
  unique: Scalars['Int'];
};

export enum VisitorsPagesSort {
  /** Least amount of time on page */
  AverageTimeOnPageAsc = 'average_time_on_page__asc',
  /** Longest average duration */
  AverageTimeOnPageDesc = 'average_time_on_page__desc',
  /** Least amount of views first */
  ViewsCountAsc = 'views_count__asc',
  /** Most amount of views first */
  ViewsCountDesc = 'views_count__desc'
}

export type VisitorsPagination = {
  __typename?: 'VisitorsPagination';
  pageSize: Scalars['Int'];
  sort: VisitorsSort;
  total: Scalars['Int'];
};

export type VisitorsRecordingCount = {
  __typename?: 'VisitorsRecordingCount';
  new: Scalars['Int'];
  total: Scalars['Int'];
};

export enum VisitorsSort {
  /** Least recently viewed */
  FirstViewedAtAsc = 'first_viewed_at__asc',
  /** Most recently viewed */
  FirstViewedAtDesc = 'first_viewed_at__desc',
  /** Least recently active */
  LastActivityAtAsc = 'last_activity_at__asc',
  /** Most recently active */
  LastActivityAtDesc = 'last_activity_at__desc',
  /** Least amount of recordings */
  RecordingsAsc = 'recordings__asc',
  /** Most amount of recordings */
  RecordingsDesc = 'recordings__desc'
}

/** Autogenerated input type of VisitorsStarred */
export type VisitorsStarredInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  siteId: Scalars['ID'];
  starred: Scalars['Boolean'];
  visitorId: Scalars['ID'];
};
